
https://mattstauffer.co/blog/introducing-laravel-dusk-new-in-laravel-5-4

php artisan dusk:make GigAddTest

php artisan dusk

==============================
$errors = $validator->errors();
and
$errors = Session::get('errors');
and 
$errors in view template
are all an instance of MessageBag
https://laravel.com/api/5.1/Illuminate/Contracts/Support/MessageBag.html

===============================

$request->session()->flash('status', 'Task was successful!');

if ($request->session()->has('users')) {
    $value = $request->session()->get('users');

$value = $request->session()->get('users','defultval');

$data = $request->session()->all();

$request->session()->flush();

==============================
//flashed validator errors in controller

//$errors variable will be an instance of MessageBag
//second argument is a default value that
//will be returned if the specified key does not exist in the session
$errors = Session::get('errors', new Illuminate\Support\MessageBag);


if($errors->has()) {
    foreach ($errors->all('<p>:message</p>') as $message) {
        echo $message;
    }     
}

=====================
$request->flash();
$request->flashExcept('password');
$request->flashOnly(['username', 'email']);
$input = $request->only(['username', 'password']);
$input = $request->all();
$name = $request->input('name');
$name = $request->name;

if ($request->has('name')) {}
=====================


<form method="POST" action="route('gig.add')">
    {{ csrf_field() }}
    <input type="text" name="desc" value="{{ old('desc') }}">
    <input type="text" id="desc" name="desc" value="{{$post['desc']}}">
    <button type="submit" >Add</button>
</form>



//GET
public function add()
{
    $post=[ 'desc'=>$request->old('description')
            ,'date' =>'today']

    return view('gig.add',['post'=>$post]);
    //return view('gig.add',$post);
}

//POST
public function add(Request request
                    ,Response response
                    ,Validation\Factory $validator)
{
	$input =  [ 'title' => request.input(‘title’)
			    ,‘desc’ =>  request.input(‘description’)];

	$validator = $validator.make($input,[...]);

	if($validation->fails())
		return response.redirect()->back()->withErrors($validator);

    $input =  [ 'title' => request.input(‘title’)
			    ,‘desc’ =>  request.input(‘description’)];

	
    $gig = new Gig($input);

	$output = ['title'=>$gig->title];

	return response.view('home.index”, $output);
}


public function create(Request $request)
{
    $validator = Validator::make($request->all(), [
        'title' => 'required|unique:posts|max:255',
        'body' => 'required',
    ]);

    if ($validator->fails()) {
        return redirect('post/create')
                    ->withErrors($validator)
                    ->withInput();
    }
}

public function store(Request $request)
{
    $this->validate($request, [
        'title' => 'bail|required|unique:posts|max:255',
        'body' => 'required',
    ]);
}

====================================

//$errors variable will be an instance of MessageBag
$errors = $validator->errors();

return redirect->back()->withErrors($validator)
return redirect->back()->with('errors',$validator->errors())
return redirect->route('gig.add')->with('errors',$validator->errors());


$validator->errors()->add('field', 'Bad field');


======================================

//$errors variable will be an instance of MessageBag

@if (count($errors) > 0)
    <div class="alert alert-danger">
        <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif

@if (count($errors->get('email')) > 0)
    <div class="alert alert-danger">
        <ul>
            @foreach ($errors->get('email') as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif

=======================

git push --set-upstream origin feature_add_gig

Auth::loginUsingId(1);

//date format
2017-07-04

https://scotch.io/tutorials/easier-datetime-in-laravel-and-php-with-carbon

http://carbon.nesbot.com/

https://github.com/briannesbitt/Carbon

https://packagist.org/packages/nesbot/carbon

class MyModel
{
    protected $dates = ['date','published_at'];
}

$model = new MyModel;
$model->date = Carbon::now();

$published_string = $model->published_at->format('M d Y');
$published_carbon_date = $model->published_at;

Carbon::parse('Y-m-d', $date_string);

================

$gigs = Gig::where('user_id','=',Auth::user()->id)->get();



$gigs = Gig::all();



$gig = Gig::find($id);



$gigs = Gig::where('user_id','=',Auth::user()->id)->update(['desc'=>$newDesc]);

Gig::where('user_id','=',Auth::user()->id)->delete();

Gig::where('user_id','=',Auth::user()->id)->update(['desc'=>$newDesc]);

DB::Table('gigs')->where(...);
-----------------
class Gig 
{
    use SoftDeletes;
    protected $dates = ['deleted_at'];
}

//migration
Schema::table('gigs',function($table){
$table->softDeletes();
}

----------------

https://blog.jetbrains.com/phpstorm/2017/03/new-in-phpstorm-2017-1-parameter-hints/





