
https://mattstauffer.co/blog/introducing-laravel-dusk-new-in-laravel-5-4

php artisan dusk:make GigAddTest

php artisan dusk

==============================
$errors = $validator->errors();
and
$errors = Session::get('errors');
and 
$errors in view template
are all an instance of MessageBag
https://laravel.com/api/5.1/Illuminate/Contracts/Support/MessageBag.html

===============================

$request->session()->flash('status', 'Task was successful!');

if ($request->session()->has('users')) {
    $value = $request->session()->get('users');

$value = $request->session()->get('users','defultval');

$data = $request->session()->all();

$request->session()->flush();

==============================
//flashed validator errors in controller

//$errors variable will be an instance of MessageBag
//second argument is a default value that
//will be returned if the specified key does not exist in the session
$errors = Session::get('errors', new Illuminate\Support\MessageBag);


if($errors->has()) {
    foreach ($errors->all('<p>:message</p>') as $message) {
        echo $message;
    }     
}

=====================
$request->flash();
$request->flashExcept('password');
$request->flashOnly(['username', 'email']);
$input = $request->only(['username', 'password']);
$input = $request->all();
$name = $request->input('name');
$name = $request->name;

if ($request->has('name')) {}
=====================


<form method="POST" action="route('gig.add')">
    {{ csrf_field() }}
    <input type="text" name="desc" value="{{ old('desc') }}">
    <input type="text" id="desc" name="desc" value="{{$post['desc']}}">
    <button type="submit" >Add</button>
</form>



//GET
public function add()
{
    $post=[ 'desc'=>$request->old('description')
            ,'date' =>'today']

    return view('gig.add',['post'=>$post]);
    //return view('gig.add',$post);
}

//POST
public function add(Request request
                    ,Response response
                    ,Validation\Factory $validator)
{
	$input =  [ 'title' => request.input(‘title’)
			    ,‘desc’ =>  request.input(‘description’)];

	$validator = $validator.make($input,[...]);

	if($validation->fails())
		return response.redirect()->back()->withErrors($validator);

    $input =  [ 'title' => request.input(‘title’)
			    ,‘desc’ =>  request.input(‘description’)];

	
    $gig = new Gig($input);

	$output = ['title'=>$gig->title];

	return response.view('home.index”, $output);
}


public function create(Request $request)
{
    $validator = Validator::make($request->all(), [
        'title' => 'required|unique:posts|max:255',
        'body' => 'required',
    ]);

    if ($validator->fails()) {
        return redirect('post/create')
                    ->withErrors($validator)
                    ->withInput();
    }
}

public function store(Request $request)
{
    $this->validate($request, [
        'title' => 'bail|required|unique:posts|max:255',
        'body' => 'required',
    ]);
}

====================================

//$errors variable will be an instance of MessageBag
$errors = $validator->errors();

return redirect->back()->withErrors($validator)
return redirect->back()->with('errors',$validator->errors())
return redirect->route('gig.add')->with('errors',$validator->errors());


$validator->errors()->add('field', 'Bad field');


======================================

//$errors variable will be an instance of MessageBag

@if (count($errors) > 0)
    <div class="alert alert-danger">
        <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif

@if (count($errors->get('email')) > 0)
    <div class="alert alert-danger">
        <ul>
            @foreach ($errors->get('email') as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif

=======================

git push --set-upstream origin feature_add_gig

Auth::loginUsingId(1);

//date format
2017-07-04

https://scotch.io/tutorials/easier-datetime-in-laravel-and-php-with-carbon

http://carbon.nesbot.com/

https://github.com/briannesbitt/Carbon

https://packagist.org/packages/nesbot/carbon

class MyModel
{
    protected $dates = ['date','published_at'];
}

$model = new MyModel;
$model->date = Carbon::now();

$published_string = $model->published_at->format('M d Y');
$published_carbon_date = $model->published_at;

Carbon::parse('Y-m-d', $date_string);

================

$gigs = Gig::where('user_id','=',Auth::user()->id)->get();



$gigs = Gig::all();



$gig = Gig::find($id);



$gigs = Gig::where('user_id','=',Auth::user()->id)->update(['desc'=>$newDesc]);

Gig::where('user_id','=',Auth::user()->id)->delete();

Gig::where('user_id','=',Auth::user()->id)->update(['desc'=>$newDesc]);

DB::Table('gigs')->where(...);
-----------------
class Gig 
{
    use SoftDeletes;
    protected $dates = ['deleted_at'];
}

//migration
Schema::table('gigs',function($table){
$table->softDeletes();
}

----------------

https://blog.jetbrains.com/phpstorm/2017/03/new-in-phpstorm-2017-1-parameter-hints/


------------------
php artisan make:model Gig -m

php artisan migrate:refresh
-------------------
Testing


date format required
2017-07-11

phpunit

php artisan make:test GigAddTest
php artisan make:test Gig/GigAddTest


phpunit.xml

<php>
    <env name="APP_ENV" value="testing"/>
    <env name="CACHE_DRIVER" value="array"/>
    <env name="SESSION_DRIVER" value="array"/>
    <env name="QUEUE_DRIVER" value="sync"/>
    <env name=“DB_CONNECTION” value=“sqlite”/>
    <env name=“DB_DATABASE” value=“:memory:”/>
</php>

$factory->define(App\User::class, function (Faker\Generator $faker) 
{
    static $password;

    return [
        'name' => $faker->name,
        'email' => $faker->unique()->safeEmail,
        'password' => $password ?: $password = bcrypt('secret'),
        'remember_token' => str_random(10),
    ];
});



$factory->define(App\Gig::class, function (Faker\Generator $faker) 
{
    static $password;

    return [
        ‘desc’ => $faker->namexxxxx,
        ‘gigday’ => \Carbon\Carbon::now(),
        ‘user_id’ => function(){
                return factory(App\User::class)->create()->id;
		},
    ];
});



function test_xxx()
{
    $this->actingAs(factory(‘App\User’)->create());

    //$gig = factory(App\Gig::class)->create();
    $gig = factory(‘App\Gig’)->make();

    $this->post(‘/gig/add’),$gig->toArray());

    $this->assertSee($gig->desc);
}



$response->assertStatus($code);
Assert that the response has a given code.
$response->assertRedirect($uri);
Assert that the response is a redirect to a given URI.
$response->assertHeader($headerName, $value = null);
Assert that the given header is present on the response.
$response->assertCookie($cookieName, $value = null);
Assert that the response contains the given cookie.
$response->assertPlainCookie($cookieName, $value = null);
Assert that the response contains the given cookie (unencrypted).
$response->assertSessionHas($key, $value = null);
Assert that the session contains the given piece of data.
$response->assertSessionHasErrors(array $keys);
Assert that the session contains an error for the given field.
$response->assertSessionMissing($key);
Assert that the session does not contain the given key.
$response->assertJson(array $data);
Assert that the response contains the given JSON data.
$response->assertJsonFragment(array $data);
Assert that the response contains the given JSON fragment.
$response->assertJsonMissing(array $data);
Assert that the response does not contain the given JSON fragment.
$response->assertExactJson(array $data);
Assert that the response contains an exact match of the given JSON data.
$response->assertJsonStructure(array $structure);
Assert that the response has a given JSON structure.
$response->assertViewHas($key, $value = null);
Assert that the response view was given a piece of data.


=====================

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class GigAddTest extends TestCase
{
    use DatabaseMigrations;
    use DatabaseTransactions;

    //parent::setUp();

    public function navigating_to_add_gig_displays_form()
    {
        $this->assertTrue(true);

        $response = $this->get('/');

        $response = $this->withSession(['foo' => 'bar'])->get('/');

        $user = factory(User::class)->create();

        //$this->actingAs($user, 'web')

        $response = $this->actingAs($user)
                         ->withSession(['foo' => 'bar'])
                         ->get('/');

        $response->assertStatus(200);

        $this->assertDatabaseHas('users'
                                , ['email' => 'sally@example.com']);
    }
}



